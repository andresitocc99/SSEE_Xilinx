/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "platform.h"
#include "xtmrctr.h"
#include "xaxidma.h"
#include "xil_printf.h"
#include "xparameters.h"
#include "ff.h"
#include <float.h>

#include "lib_hyperspectral_hw.h"

#define NUM_TESTS 1

#define FILAS 2
#define COLUMNAS 1024
#define BANDAS 180

// TIMER Instance
XTmrCtr timer_dev;

// AXI DMA Instance
XAxiDma AxiDma;

static FATFS fat_fs;

u32 mount_filesystem() {
    TCHAR *Path = "0:/";
    FRESULT res;
    res = f_mount(&fat_fs, Path, 1);

    if (res != FR_OK) {
        xil_printf("mount failed %d\n\r",res);
        return XST_FAILURE;
    }
    return XST_SUCCESS;
}

u32 umount_filesystem() {
    TCHAR *Path = "0:/";
    FRESULT res;
    res = f_mount(NULL, Path, 0);

    if (res != FR_OK) {
        xil_printf("umount failed %d\n\r",res);
        return XST_FAILURE;
    }
    return XST_SUCCESS;
}

u32 LoadFile(uint16_t image [FILAS][COLUMNAS][BANDAS]){
    FIL fp;
    u32 bytes_read = 0;

    if (mount_filesystem() == XST_FAILURE)
        return XST_FAILURE;

    FRESULT res = f_open(&fp, "cuboH.bin", FA_READ);
    if (res != FR_OK) {
        xil_printf("could not open the file %d\n\r",res);
        return XST_FAILURE;
    }

    u32 bytes_size = FILAS * COLUMNAS * BANDAS * sizeof(uint16_t);


    f_read(&fp, image, bytes_size, &bytes_read);
    if (res != FR_OK || bytes_size != bytes_read) {
    	xil_printf("could not open the file %d\n\r",res);
    	f_close(&fp);
    	return XST_FAILURE;

    }
    f_close(&fp);

    return XST_SUCCESS;
}

int init_dma() {
	XAxiDma_Config *CfgPtr;
	int status;

	CfgPtr = XAxiDma_LookupConfig( (XPAR_AXI_DMA_0_DEVICE_ID) );
	if(!CfgPtr){
		print("Error looking for AXI DMA config\n\r");
		return XST_FAILURE;
	}
	status = XAxiDma_CfgInitialize(&AxiDma,CfgPtr);
	if(status != XST_SUCCESS){
		print("Error initializing DMA\n\r");
		return XST_FAILURE;
	}
	//check for scatter gather mode
	if(XAxiDma_HasSg(&AxiDma)){
		print("Error DMA configured in SG mode\n\r");
		return XST_FAILURE;
	}
	/* Disable interrupts, we use polling mode */
	XAxiDma_IntrDisable(&AxiDma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DEVICE_TO_DMA);
	XAxiDma_IntrDisable(&AxiDma, XAXIDMA_IRQ_ALL_MASK, XAXIDMA_DMA_TO_DEVICE);

	// Reset DMA
	XAxiDma_Reset(&AxiDma);
	while (!XAxiDma_ResetIsDone(&AxiDma)) {}

	return XST_SUCCESS;
}

int main() {

	int i;
	int err=0;
	int status;

	uint16_t _Alignas(16) image[FILAS][COLUMNAS][BANDAS];
	int _Alignas(16) refPixel[2] = {0,40};
	int _Alignas(16) maxBrightness[2];
	float _Alignas(16) minDistance;
	int _Alignas(16) closestPixel[2];

	unsigned int dma_sizeImage = FILAS * COLUMNAS * BANDAS * sizeof(uint16_t);
	unsigned int dma_sizerefPixel = 2 * sizeof(int);
	unsigned int dma_sizeMaxBrightness = 2 * sizeof(int);
	unsigned int dma_sizeMinDistance = sizeof(float);
	unsigned int dma_sizeClosestPixel = 2 * sizeof(int);

	unsigned int init_time, curr_time, calibration;
	unsigned int begin_time;
	unsigned int end_time;
	unsigned int run_time_sw = 0;
	unsigned int run_time_hw = 0;

    init_platform();

    LoadFile(image);

    // Init DMA
	status = init_dma();
	if(status != XST_SUCCESS){
		print("\rError: DMA init failed\n");
		return XST_FAILURE;
	}
	print("\nDMA Init done\n");

	// Setup HW timer
	status = XTmrCtr_Initialize(&timer_dev, XPAR_AXI_TIMER_0_DEVICE_ID);
	if(status != XST_SUCCESS) {
		print("Error: timer setup failed\n");
	}
	XTmrCtr_SetOptions(&timer_dev, XPAR_AXI_TIMER_0_DEVICE_ID, XTC_ENABLE_ALL_OPTION);

	// Calibrate HW timer
	XTmrCtr_Reset(&timer_dev, XPAR_AXI_TIMER_0_DEVICE_ID);
	init_time = XTmrCtr_GetValue(&timer_dev, XPAR_AXI_TIMER_0_DEVICE_ID);
	curr_time = XTmrCtr_GetValue(&timer_dev, XPAR_AXI_TIMER_0_DEVICE_ID);
	calibration = curr_time - init_time;

	// Loop measurement
	XTmrCtr_Reset(&timer_dev, XPAR_AXI_TIMER_0_DEVICE_ID);
	begin_time = XTmrCtr_GetValue(&timer_dev, XPAR_AXI_TIMER_0_DEVICE_ID);
	for (i = 0; i < NUM_TESTS; i++);
	end_time = XTmrCtr_GetValue(&timer_dev, XPAR_AXI_TIMER_0_DEVICE_ID);
	run_time_sw = end_time - begin_time - calibration;
	xil_printf("Loop time for %d iterations is %d cycles\n", NUM_TESTS, run_time_sw);

	// Input data initiation
	for(i = 0; i < 2; i++) {
		maxBrightness[i] = 0;
		closestPixel[i] = 0;
	}
	minDistance = FLT_MAX;

	xil_printf("Running Hyperspectral Image Processing in SW\n");
	XTmrCtr_Reset(&timer_dev, XPAR_AXI_TIMER_0_DEVICE_ID);
	begin_time = XTmrCtr_GetValue(&timer_dev, XPAR_AXI_TIMER_0_DEVICE_ID);
	for (i = 0; i < NUM_TESTS; i++) {
		hyperspectral_sw(image, refPixel, maxBrightness, &minDistance, closestPixel);
	}
	end_time = XTmrCtr_GetValue(&timer_dev, XPAR_AXI_TIMER_0_DEVICE_ID);
	run_time_sw = end_time - begin_time - calibration;
	xil_printf("\nTotal run time for SW on Processor is %d cycles over %d tests.\n",
			run_time_sw/NUM_TESTS, NUM_TESTS);

	// Setup HW Accelerator
	XTmrCtr_Reset(&timer_dev, XPAR_AXI_TIMER_0_DEVICE_ID);
	begin_time = XTmrCtr_GetValue(&timer_dev, XPAR_AXI_TIMER_0_DEVICE_ID);

	status = Start_HW_Accelerator();

	// Flush the cache
	Xil_DCacheFlushRange((unsigned int)image, dma_sizeImage);
	Xil_DCacheFlushRange((unsigned int)refPixel, dma_sizeRefPixel);
	Xil_DCacheFlushRange((unsigned int)maxBrightness, dma_sizeMaxBrightness);
	Xil_DCacheFlushRange((unsigned int)&minDistance, dma_sizeMinDistance);
	Xil_DCacheFlushRange((unsigned int)closestPixel, dma_sizeClosestPixel);

	print("\rCache cleared\n\r");

	for (i = 0; i < NUM_TESTS; i++) {
		status = Run_HW_Accelerator(image, refPixel, maxBrightness, &minDistance, closestPixel,
									dma_sizeImage, dma_sizeRefPixel, dma_sizeMaxBrightness,
									dma_sizeMinDistance, dma_sizeClosestPixel);
	}
	end_time = XTmrCtr_GetValue(&timer_dev, XPAR_AXI_TIMER_0_DEVICE_ID);
	run_time_hw = end_time - begin_time - calibration;
	xil_printf(
			"Total run time for AXI DMA + HW accelerator is %d cycles over %d tests\n",
			run_time_hw/NUM_TESTS, NUM_TESTS);

	// Compare the results from sw and hw
	for (i = 0; i < 2; i++) {
		if (maxBrightness[i] != maxBrightness_hw[i] || closestPixel[i] != closestPixel_hw[i]) {
			err++;
		}
	}
	if (minDistance != minDistance_hw) {
		err++;
	}

    cleanup_platform();
    return 0;
}

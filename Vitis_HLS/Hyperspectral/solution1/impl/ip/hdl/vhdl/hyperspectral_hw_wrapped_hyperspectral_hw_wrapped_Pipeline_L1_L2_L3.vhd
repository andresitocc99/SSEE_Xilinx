-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hyperspectral_hw_wrapped_hyperspectral_hw_wrapped_Pipeline_L1_L2_L3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    image_r_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    image_r_ce0 : OUT STD_LOGIC;
    image_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    select_ln44_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    select_ln44_2_out_ap_vld : OUT STD_LOGIC;
    select_ln44_3_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    select_ln44_3_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of hyperspectral_hw_wrapped_hyperspectral_hw_wrapped_Pipeline_L1_L2_L3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv24_0 : STD_LOGIC_VECTOR (23 downto 0) := "000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv19_5A000 : STD_LOGIC_VECTOR (18 downto 0) := "1011010000000000000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv19_2D000 : STD_LOGIC_VECTOR (18 downto 0) := "0101101000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_B4 : STD_LOGIC_VECTOR (7 downto 0) := "10110100";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv19_B4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010110100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln37_fu_179_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal empty_20_fu_171_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_20_reg_605 : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_20_reg_605_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_20_reg_605_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal empty_20_reg_605_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_fu_175_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln44_reg_611 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln44_reg_611_pp0_iter2_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln44_reg_611_pp0_iter3_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln44_reg_611_pp0_iter4_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln37_reg_616 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_616_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_616_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_reg_616_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln37_fu_197_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln37_reg_620 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln37_reg_620_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln37_reg_620_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln37_reg_620_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln38_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_625 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_625_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_625_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_625_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln47_fu_209_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln47_reg_634 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln47_reg_634_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln47_reg_634_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln47_reg_634_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal and_ln47_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln47_reg_639 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln47_reg_639_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln47_reg_639_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln47_reg_639_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_reg_646 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_reg_646_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_reg_646_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_reg_646_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln38_fu_267_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln38_reg_651 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln38_reg_651_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln41_3_fu_335_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal currentBrightness_fu_64 : STD_LOGIC_VECTOR (23 downto 0);
    signal currentBrightness_3_fu_507_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal k_fu_68 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln40_fu_287_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_72 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln38_5_fu_496_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_06_i_i631_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln38_4_fu_489_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_05_i_i633_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln38_3_fu_482_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_84 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln38_2_fu_275_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_flatten31_fu_88 : STD_LOGIC_VECTOR (18 downto 0);
    signal select_ln38_6_fu_299_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal i_3_fu_92 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln47_4_fu_217_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten52_fu_96 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln37_1_fu_185_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal select_ln44_2_fu_367_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal select_ln44_3_fu_376_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_225_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln40_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln47_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln38_fu_255_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln38_1_fu_293_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_533_p4 : STD_LOGIC_VECTOR (18 downto 0);
    signal currentBrightness_cast_fu_354_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln44_1_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln44_1_fu_364_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_cast_cast_fu_351_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln44_4_fu_399_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal empty_22_fu_414_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln47_5_fu_417_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln47_6_fu_427_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln47_7_cast_fu_434_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln47_3_fu_407_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln44_1_fu_444_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln44_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln44_fu_447_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln47_1_fu_385_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln47_fu_423_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln47_2_fu_392_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln44_fu_451_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln44_1_fu_459_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal maxBrightness_fu_467_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln41_fu_503_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal select_ln38_1_fu_475_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal grp_fu_533_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_533_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_533_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_533_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_533_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_533_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_533_p30 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component hyperspectral_hw_wrapped_ama_addmuladd_12ns_11ns_8ns_8ns_19_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        din3 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component hyperspectral_hw_wrapped_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    ama_addmuladd_12ns_11ns_8ns_8ns_19_4_1_U30 : component hyperspectral_hw_wrapped_ama_addmuladd_12ns_11ns_8ns_8ns_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 11,
        din2_WIDTH => 8,
        din3_WIDTH => 8,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_533_p0,
        din1 => grp_fu_533_p1,
        din2 => grp_fu_533_p2,
        din3 => grp_fu_533_p3,
        ce => ap_const_logic_1,
        dout => grp_fu_533_p4);

    flow_control_loop_pipe_sequential_init_U : component hyperspectral_hw_wrapped_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_0))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    currentBrightness_fu_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    currentBrightness_fu_64 <= ap_const_lv24_0;
                elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln37_reg_616_pp0_iter4_reg = ap_const_lv1_0))) then 
                    currentBrightness_fu_64 <= currentBrightness_3_fu_507_p2;
                end if;
            end if; 
        end if;
    end process;

    empty_fu_72_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    empty_fu_72 <= ap_const_lv32_0;
                elsif (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln37_reg_616_pp0_iter4_reg = ap_const_lv1_0))) then 
                    empty_fu_72 <= select_ln38_5_fu_496_p3;
                end if;
            end if; 
        end if;
    end process;

    i_3_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_3_fu_92 <= ap_const_lv2_0;
                elsif (((icmp_ln37_fu_179_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_3_fu_92 <= select_ln47_4_fu_217_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten31_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten31_fu_88 <= ap_const_lv19_0;
                elsif (((icmp_ln37_fu_179_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten31_fu_88 <= select_ln38_6_fu_299_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten52_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten52_fu_96 <= ap_const_lv19_0;
                elsif (((icmp_ln37_fu_179_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten52_fu_96 <= add_ln37_1_fu_185_p2;
                end if;
            end if; 
        end if;
    end process;

    j_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_84 <= ap_const_lv11_0;
                elsif (((icmp_ln37_fu_179_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_84 <= select_ln38_2_fu_275_p3;
                end if;
            end if; 
        end if;
    end process;

    k_fu_68_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_68 <= ap_const_lv8_0;
                elsif (((icmp_ln37_fu_179_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    k_fu_68 <= add_ln40_fu_287_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln37_fu_179_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln37_reg_620 <= add_ln37_fu_197_p2;
                and_ln47_reg_639 <= and_ln47_fu_249_p2;
                icmp_ln38_reg_625 <= icmp_ln38_fu_203_p2;
                or_ln38_reg_646 <= or_ln38_fu_261_p2;
                select_ln38_reg_651 <= select_ln38_fu_267_p3;
                select_ln47_reg_634 <= select_ln47_fu_209_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln37_reg_620_pp0_iter2_reg <= add_ln37_reg_620;
                add_ln37_reg_620_pp0_iter3_reg <= add_ln37_reg_620_pp0_iter2_reg;
                add_ln37_reg_620_pp0_iter4_reg <= add_ln37_reg_620_pp0_iter3_reg;
                and_ln47_reg_639_pp0_iter2_reg <= and_ln47_reg_639;
                and_ln47_reg_639_pp0_iter3_reg <= and_ln47_reg_639_pp0_iter2_reg;
                and_ln47_reg_639_pp0_iter4_reg <= and_ln47_reg_639_pp0_iter3_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
                empty_20_reg_605_pp0_iter2_reg <= empty_20_reg_605;
                empty_20_reg_605_pp0_iter3_reg <= empty_20_reg_605_pp0_iter2_reg;
                empty_20_reg_605_pp0_iter4_reg <= empty_20_reg_605_pp0_iter3_reg;
                icmp_ln37_reg_616_pp0_iter2_reg <= icmp_ln37_reg_616;
                icmp_ln37_reg_616_pp0_iter3_reg <= icmp_ln37_reg_616_pp0_iter2_reg;
                icmp_ln37_reg_616_pp0_iter4_reg <= icmp_ln37_reg_616_pp0_iter3_reg;
                icmp_ln38_reg_625_pp0_iter2_reg <= icmp_ln38_reg_625;
                icmp_ln38_reg_625_pp0_iter3_reg <= icmp_ln38_reg_625_pp0_iter2_reg;
                icmp_ln38_reg_625_pp0_iter4_reg <= icmp_ln38_reg_625_pp0_iter3_reg;
                or_ln38_reg_646_pp0_iter2_reg <= or_ln38_reg_646;
                or_ln38_reg_646_pp0_iter3_reg <= or_ln38_reg_646_pp0_iter2_reg;
                or_ln38_reg_646_pp0_iter4_reg <= or_ln38_reg_646_pp0_iter3_reg;
                select_ln38_reg_651_pp0_iter2_reg <= select_ln38_reg_651;
                select_ln47_reg_634_pp0_iter2_reg <= select_ln47_reg_634;
                select_ln47_reg_634_pp0_iter3_reg <= select_ln47_reg_634_pp0_iter2_reg;
                select_ln47_reg_634_pp0_iter4_reg <= select_ln47_reg_634_pp0_iter3_reg;
                trunc_ln44_reg_611_pp0_iter2_reg <= trunc_ln44_reg_611;
                trunc_ln44_reg_611_pp0_iter3_reg <= trunc_ln44_reg_611_pp0_iter2_reg;
                trunc_ln44_reg_611_pp0_iter4_reg <= trunc_ln44_reg_611_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
                empty_20_reg_605 <= empty_20_fu_171_p1;
                icmp_ln37_reg_616 <= icmp_ln37_fu_179_p2;
                trunc_ln44_reg_611 <= trunc_ln44_fu_175_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (icmp_ln37_reg_616_pp0_iter4_reg = ap_const_lv1_0))) then
                i_06_i_i631_fu_76 <= select_ln38_4_fu_489_p3;
                j_05_i_i633_fu_80 <= select_ln38_3_fu_482_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln37_1_fu_185_p2 <= std_logic_vector(unsigned(indvar_flatten52_fu_96) + unsigned(ap_const_lv19_1));
    add_ln37_fu_197_p2 <= std_logic_vector(unsigned(i_3_fu_92) + unsigned(ap_const_lv2_1));
    add_ln38_1_fu_293_p2 <= std_logic_vector(unsigned(indvar_flatten31_fu_88) + unsigned(ap_const_lv19_1));
    add_ln38_fu_255_p2 <= std_logic_vector(unsigned(select_ln47_fu_209_p3) + unsigned(ap_const_lv11_1));
    add_ln40_fu_287_p2 <= std_logic_vector(unsigned(select_ln38_fu_267_p3) + unsigned(ap_const_lv8_1));
    and_ln47_fu_249_p2 <= (xor_ln47_fu_237_p2 and icmp_ln40_fu_243_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, icmp_ln37_fu_179_p2)
    begin
        if (((icmp_ln37_fu_179_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;

    currentBrightness_3_fu_507_p2 <= std_logic_vector(unsigned(zext_ln41_fu_503_p1) + unsigned(select_ln38_1_fu_475_p3));
    currentBrightness_cast_fu_354_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(currentBrightness_fu_64),32));
    empty_20_fu_171_p1 <= i_3_fu_92(1 - 1 downto 0);
    empty_22_fu_414_p1 <= add_ln37_reg_620_pp0_iter4_reg(1 - 1 downto 0);
    grp_fu_533_p0 <= grp_fu_533_p00(12 - 1 downto 0);
    grp_fu_533_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_225_p3),13));
    grp_fu_533_p1 <= grp_fu_533_p10(11 - 1 downto 0);
    grp_fu_533_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln38_2_fu_275_p3),13));
    grp_fu_533_p2 <= ap_const_lv19_B4(8 - 1 downto 0);
    grp_fu_533_p3 <= grp_fu_533_p30(8 - 1 downto 0);
    grp_fu_533_p30 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln38_reg_651_pp0_iter2_reg),19));
    i_3_cast_cast_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(empty_20_reg_605_pp0_iter4_reg),32));
    icmp_ln37_fu_179_p2 <= "1" when (indvar_flatten52_fu_96 = ap_const_lv19_5A000) else "0";
    icmp_ln38_fu_203_p2 <= "1" when (indvar_flatten31_fu_88 = ap_const_lv19_2D000) else "0";
    icmp_ln40_fu_243_p2 <= "1" when (k_fu_68 = ap_const_lv8_B4) else "0";
    icmp_ln44_1_fu_358_p2 <= "1" when (unsigned(currentBrightness_cast_fu_354_p1) > unsigned(empty_fu_72)) else "0";
    icmp_ln44_fu_438_p2 <= "1" when (unsigned(select_ln47_7_cast_fu_434_p1) > unsigned(select_ln47_3_fu_407_p3)) else "0";
    image_r_address0 <= zext_ln41_3_fu_335_p1(19 - 1 downto 0);

    image_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            image_r_ce0 <= ap_const_logic_1;
        else 
            image_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    maxBrightness_fu_467_p3 <= 
        select_ln47_7_cast_fu_434_p1 when (icmp_ln44_fu_438_p2(0) = '1') else 
        select_ln47_3_fu_407_p3;
    or_ln38_fu_261_p2 <= (icmp_ln38_fu_203_p2 or and_ln47_fu_249_p2);
    select_ln38_1_fu_475_p3 <= 
        ap_const_lv24_0 when (or_ln38_reg_646_pp0_iter4_reg(0) = '1') else 
        currentBrightness_fu_64;
    select_ln38_2_fu_275_p3 <= 
        add_ln38_fu_255_p2 when (and_ln47_fu_249_p2(0) = '1') else 
        select_ln47_fu_209_p3;
    select_ln38_3_fu_482_p3 <= 
        select_ln44_fu_451_p3 when (and_ln47_reg_639_pp0_iter4_reg(0) = '1') else 
        select_ln47_1_fu_385_p3;
    select_ln38_4_fu_489_p3 <= 
        select_ln44_1_fu_459_p3 when (and_ln47_reg_639_pp0_iter4_reg(0) = '1') else 
        select_ln47_2_fu_392_p3;
    select_ln38_5_fu_496_p3 <= 
        maxBrightness_fu_467_p3 when (and_ln47_reg_639_pp0_iter4_reg(0) = '1') else 
        select_ln47_3_fu_407_p3;
    select_ln38_6_fu_299_p3 <= 
        ap_const_lv19_1 when (icmp_ln38_fu_203_p2(0) = '1') else 
        add_ln38_1_fu_293_p2;
    select_ln38_fu_267_p3 <= 
        ap_const_lv8_0 when (or_ln38_fu_261_p2(0) = '1') else 
        k_fu_68;
    select_ln44_1_fu_459_p3 <= 
        zext_ln47_fu_423_p1 when (icmp_ln44_fu_438_p2(0) = '1') else 
        select_ln47_2_fu_392_p3;
    select_ln44_2_fu_367_p3 <= 
        zext_ln44_1_fu_364_p1 when (icmp_ln44_1_fu_358_p2(0) = '1') else 
        j_05_i_i633_fu_80;
    select_ln44_2_out <= select_ln44_2_fu_367_p3;

    select_ln44_2_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln37_reg_616_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln37_reg_616_pp0_iter4_reg = ap_const_lv1_1))) then 
            select_ln44_2_out_ap_vld <= ap_const_logic_1;
        else 
            select_ln44_2_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln44_3_fu_376_p3 <= 
        i_3_cast_cast_fu_351_p1 when (icmp_ln44_1_fu_358_p2(0) = '1') else 
        i_06_i_i631_fu_76;
    select_ln44_3_out <= select_ln44_3_fu_376_p3;

    select_ln44_3_out_ap_vld_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln37_reg_616_pp0_iter4_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln37_reg_616_pp0_iter4_reg = ap_const_lv1_1))) then 
            select_ln44_3_out_ap_vld <= ap_const_logic_1;
        else 
            select_ln44_3_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    select_ln44_4_fu_399_p3 <= 
        currentBrightness_cast_fu_354_p1 when (icmp_ln44_1_fu_358_p2(0) = '1') else 
        empty_fu_72;
    select_ln44_fu_451_p3 <= 
        zext_ln44_fu_447_p1 when (icmp_ln44_fu_438_p2(0) = '1') else 
        select_ln47_1_fu_385_p3;
    select_ln47_1_fu_385_p3 <= 
        select_ln44_2_fu_367_p3 when (icmp_ln38_reg_625_pp0_iter4_reg(0) = '1') else 
        j_05_i_i633_fu_80;
    select_ln47_2_fu_392_p3 <= 
        select_ln44_3_fu_376_p3 when (icmp_ln38_reg_625_pp0_iter4_reg(0) = '1') else 
        i_06_i_i631_fu_76;
    select_ln47_3_fu_407_p3 <= 
        select_ln44_4_fu_399_p3 when (icmp_ln38_reg_625_pp0_iter4_reg(0) = '1') else 
        empty_fu_72;
    select_ln47_4_fu_217_p3 <= 
        add_ln37_fu_197_p2 when (icmp_ln38_fu_203_p2(0) = '1') else 
        i_3_fu_92;
    select_ln47_5_fu_417_p3 <= 
        empty_22_fu_414_p1 when (icmp_ln38_reg_625_pp0_iter4_reg(0) = '1') else 
        empty_20_reg_605_pp0_iter4_reg;
    select_ln47_6_fu_427_p3 <= 
        ap_const_lv24_0 when (icmp_ln38_reg_625_pp0_iter4_reg(0) = '1') else 
        currentBrightness_fu_64;
    select_ln47_7_cast_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln47_6_fu_427_p3),32));
    select_ln47_fu_209_p3 <= 
        ap_const_lv11_0 when (icmp_ln38_fu_203_p2(0) = '1') else 
        j_fu_84;
    tmp_s_fu_225_p3 <= (select_ln47_4_fu_217_p3 & ap_const_lv10_0);
    trunc_ln44_1_fu_444_p1 <= select_ln47_reg_634_pp0_iter4_reg(10 - 1 downto 0);
    trunc_ln44_fu_175_p1 <= j_fu_84(10 - 1 downto 0);
    xor_ln47_fu_237_p2 <= (icmp_ln38_fu_203_p2 xor ap_const_lv1_1);
    zext_ln41_3_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_533_p4),64));
    zext_ln41_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(image_r_q0),24));
    zext_ln44_1_fu_364_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln44_reg_611_pp0_iter4_reg),32));
    zext_ln44_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln44_1_fu_444_p1),32));
    zext_ln47_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln47_5_fu_417_p3),32));
end behav;

// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hyperspectral_hw_wrapped_hyperspectral_hw_wrapped_Pipeline_VITIS_LOOP_114_5 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_stream_TVALID,
        in_stream_TDATA,
        in_stream_TREADY,
        in_stream_TKEEP,
        in_stream_TSTRB,
        in_stream_TUSER,
        in_stream_TLAST,
        in_stream_TID,
        in_stream_TDEST,
        refPixel_1_034_out,
        refPixel_1_034_out_ap_vld,
        refPixel_0_033_out,
        refPixel_0_033_out_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   in_stream_TVALID;
input  [31:0] in_stream_TDATA;
output   in_stream_TREADY;
input  [3:0] in_stream_TKEEP;
input  [3:0] in_stream_TSTRB;
input  [3:0] in_stream_TUSER;
input  [0:0] in_stream_TLAST;
input  [4:0] in_stream_TID;
input  [4:0] in_stream_TDEST;
output  [31:0] refPixel_1_034_out;
output   refPixel_1_034_out_ap_vld;
output  [31:0] refPixel_0_033_out;
output   refPixel_0_033_out_ap_vld;

reg ap_idle;
reg in_stream_TREADY;
reg refPixel_1_034_out_ap_vld;
reg refPixel_0_033_out_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln114_fu_138_p2;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    in_stream_TDATA_blk_n;
reg   [1:0] i_1_fu_86;
wire   [1:0] add_ln114_fu_144_p2;
wire    ap_loop_init;
reg   [1:0] ap_sig_allocacmp_i;
reg   [31:0] refPixel_1_fu_90;
wire   [31:0] refPixel_1_6_fu_308_p3;
reg   [31:0] refPixel_1_3_fu_94;
wire   [31:0] refPixel_1_5_fu_300_p3;
wire   [22:0] p_Result_1_fu_178_p1;
wire   [24:0] mantissa_fu_182_p4;
wire   [7:0] xs_exp_V_fu_168_p4;
wire   [8:0] zext_ln346_fu_196_p1;
wire   [8:0] add_ln346_fu_200_p2;
wire   [7:0] sub_ln1512_fu_214_p2;
wire   [0:0] isNeg_fu_206_p3;
wire  signed [8:0] sext_ln1512_fu_220_p1;
wire   [8:0] ush_fu_224_p3;
wire  signed [31:0] sext_ln1488_fu_232_p1;
wire   [78:0] zext_ln15_fu_192_p1;
wire   [78:0] zext_ln1488_fu_236_p1;
wire   [78:0] r_V_fu_240_p2;
wire   [0:0] tmp_fu_252_p3;
wire   [78:0] r_V_1_fu_246_p2;
wire   [31:0] zext_ln818_fu_260_p1;
wire   [31:0] tmp_s_fu_264_p4;
wire   [31:0] val_fu_274_p3;
wire   [0:0] p_Result_s_fu_160_p3;
wire   [31:0] result_V_2_fu_282_p2;
wire   [0:0] trunc_ln119_fu_296_p1;
wire   [31:0] result_V_fu_288_p3;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_start_int;
reg    ap_condition_229;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_done_reg = 1'b0;
end

hyperspectral_hw_wrapped_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start_int == 1'b0) | ((icmp_ln114_fu_138_p2 == 1'd0) & (in_stream_TVALID == 1'b0))) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_229)) begin
        if ((icmp_ln114_fu_138_p2 == 1'd0)) begin
            i_1_fu_86 <= add_ln114_fu_144_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_1_fu_86 <= 2'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln114_fu_138_p2 == 1'd0) & (in_stream_TVALID == 1'b0))) & (icmp_ln114_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        refPixel_1_3_fu_94 <= refPixel_1_5_fu_300_p3;
        refPixel_1_fu_90 <= refPixel_1_6_fu_308_p3;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) | ((icmp_ln114_fu_138_p2 == 1'd0) & (in_stream_TVALID == 1'b0)))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln114_fu_138_p2 == 1'd0) & (in_stream_TVALID == 1'b0))) & (icmp_ln114_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln114_fu_138_p2 == 1'd0) & (in_stream_TVALID == 1'b0))) & (ap_loop_exit_ready == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln114_fu_138_p2 == 1'd0) & (in_stream_TVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_sig_allocacmp_i = 2'd0;
    end else begin
        ap_sig_allocacmp_i = i_1_fu_86;
    end
end

always @ (*) begin
    if (((icmp_ln114_fu_138_p2 == 1'd0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        in_stream_TDATA_blk_n = in_stream_TVALID;
    end else begin
        in_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln114_fu_138_p2 == 1'd0) & (in_stream_TVALID == 1'b0))) & (icmp_ln114_fu_138_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        in_stream_TREADY = 1'b1;
    end else begin
        in_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln114_fu_138_p2 == 1'd0) & (in_stream_TVALID == 1'b0))) & (icmp_ln114_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        refPixel_0_033_out_ap_vld = 1'b1;
    end else begin
        refPixel_0_033_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start_int == 1'b0) | ((icmp_ln114_fu_138_p2 == 1'd0) & (in_stream_TVALID == 1'b0))) & (icmp_ln114_fu_138_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        refPixel_1_034_out_ap_vld = 1'b1;
    end else begin
        refPixel_1_034_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln114_fu_144_p2 = (ap_sig_allocacmp_i + 2'd1);

assign add_ln346_fu_200_p2 = ($signed(zext_ln346_fu_196_p1) + $signed(9'd385));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start_int == 1'b0) | ((icmp_ln114_fu_138_p2 == 1'd0) & (in_stream_TVALID == 1'b0)));
end

always @ (*) begin
    ap_condition_229 = (~((ap_start_int == 1'b0) | ((icmp_ln114_fu_138_p2 == 1'd0) & (in_stream_TVALID == 1'b0))) & (1'b1 == ap_CS_fsm_state1));
end

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln114_fu_138_p2 = ((ap_sig_allocacmp_i == 2'd2) ? 1'b1 : 1'b0);

assign isNeg_fu_206_p3 = add_ln346_fu_200_p2[32'd8];

assign mantissa_fu_182_p4 = {{{{1'd1}, {p_Result_1_fu_178_p1}}}, {1'd0}};

assign p_Result_1_fu_178_p1 = in_stream_TDATA[22:0];

assign p_Result_s_fu_160_p3 = in_stream_TDATA[32'd31];

assign r_V_1_fu_246_p2 = zext_ln15_fu_192_p1 << zext_ln1488_fu_236_p1;

assign r_V_fu_240_p2 = zext_ln15_fu_192_p1 >> zext_ln1488_fu_236_p1;

assign refPixel_0_033_out = refPixel_1_fu_90;

assign refPixel_1_034_out = refPixel_1_3_fu_94;

assign refPixel_1_5_fu_300_p3 = ((trunc_ln119_fu_296_p1[0:0] == 1'b1) ? result_V_fu_288_p3 : refPixel_1_3_fu_94);

assign refPixel_1_6_fu_308_p3 = ((trunc_ln119_fu_296_p1[0:0] == 1'b1) ? refPixel_1_fu_90 : result_V_fu_288_p3);

assign result_V_2_fu_282_p2 = (32'd0 - val_fu_274_p3);

assign result_V_fu_288_p3 = ((p_Result_s_fu_160_p3[0:0] == 1'b1) ? result_V_2_fu_282_p2 : val_fu_274_p3);

assign sext_ln1488_fu_232_p1 = $signed(ush_fu_224_p3);

assign sext_ln1512_fu_220_p1 = $signed(sub_ln1512_fu_214_p2);

assign sub_ln1512_fu_214_p2 = (8'd127 - xs_exp_V_fu_168_p4);

assign tmp_fu_252_p3 = r_V_fu_240_p2[32'd24];

assign tmp_s_fu_264_p4 = {{r_V_1_fu_246_p2[55:24]}};

assign trunc_ln119_fu_296_p1 = ap_sig_allocacmp_i[0:0];

assign ush_fu_224_p3 = ((isNeg_fu_206_p3[0:0] == 1'b1) ? sext_ln1512_fu_220_p1 : add_ln346_fu_200_p2);

assign val_fu_274_p3 = ((isNeg_fu_206_p3[0:0] == 1'b1) ? zext_ln818_fu_260_p1 : tmp_s_fu_264_p4);

assign xs_exp_V_fu_168_p4 = {{in_stream_TDATA[30:23]}};

assign zext_ln1488_fu_236_p1 = $unsigned(sext_ln1488_fu_232_p1);

assign zext_ln15_fu_192_p1 = mantissa_fu_182_p4;

assign zext_ln346_fu_196_p1 = xs_exp_V_fu_168_p4;

assign zext_ln818_fu_260_p1 = tmp_fu_252_p3;

endmodule //hyperspectral_hw_wrapped_hyperspectral_hw_wrapped_Pipeline_VITIS_LOOP_114_5

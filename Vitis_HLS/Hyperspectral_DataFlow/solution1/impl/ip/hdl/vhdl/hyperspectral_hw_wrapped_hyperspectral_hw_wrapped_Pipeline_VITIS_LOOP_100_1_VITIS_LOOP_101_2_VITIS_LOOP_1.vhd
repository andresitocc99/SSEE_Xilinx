-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hyperspectral_hw_wrapped_hyperspectral_hw_wrapped_Pipeline_VITIS_LOOP_100_1_VITIS_LOOP_101_2_VITIS_LOOP_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_stream_TVALID : IN STD_LOGIC;
    image_r_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    image_r_ce0 : OUT STD_LOGIC;
    image_r_we0 : OUT STD_LOGIC;
    image_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    image_r_address1 : OUT STD_LOGIC_VECTOR (18 downto 0);
    image_r_ce1 : OUT STD_LOGIC;
    image_r_we1 : OUT STD_LOGIC;
    image_r_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    in_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream_TREADY : OUT STD_LOGIC;
    in_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    in_stream_TDEST : IN STD_LOGIC_VECTOR (4 downto 0) );
end;


architecture behav of hyperspectral_hw_wrapped_hyperspectral_hw_wrapped_Pipeline_VITIS_LOOP_100_1_VITIS_LOOP_101_2_VITIS_LOOP_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv18_0 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv18_2D000 : STD_LOGIC_VECTOR (17 downto 0) := "101101000000000000";
    constant ap_const_lv18_1 : STD_LOGIC_VECTOR (17 downto 0) := "000000000000000001";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv18_16800 : STD_LOGIC_VECTOR (17 downto 0) := "010110100000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv8_B4 : STD_LOGIC_VECTOR (7 downto 0) := "10110100";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv19_B4 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000010110100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal icmp_ln100_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal in_stream_TDATA_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal select_ln101_fu_265_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln101_reg_429 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln101_reg_429_pp0_iter2_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln101_reg_429_pp0_iter3_reg : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln714_fu_289_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln714_reg_435 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln714_reg_435_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln714_reg_435_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_440 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_440_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_s_reg_440_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln106_2_fu_356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln106_4_fu_375_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_fu_84 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln102_fu_303_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_88 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln101_1_fu_273_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal indvar_flatten_fu_92 : STD_LOGIC_VECTOR (17 downto 0);
    signal select_ln101_2_fu_315_p3 : STD_LOGIC_VECTOR (17 downto 0);
    signal i_fu_96 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln100_2_fu_227_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal indvar_flatten13_fu_100 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln100_1_fu_181_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal icmp_ln101_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln100_fu_199_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_2_fu_235_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln102_fu_247_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln100_fu_211_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal or_ln100_fu_253_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln100_1_fu_219_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln101_fu_259_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln101_1_fu_309_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln106_1_fu_351_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_380_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln106_1_fu_348_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln106_1_fu_351_p2 : STD_LOGIC_VECTOR (18 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln106_1_fu_351_p2 : signal is "no";
    signal or_ln106_fu_361_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln106_2_fu_370_p0 : STD_LOGIC_VECTOR (18 downto 0);
    signal zext_ln106_3_fu_366_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln106_2_fu_370_p2 : STD_LOGIC_VECTOR (18 downto 0);
    attribute use_dsp48 of add_ln106_2_fu_370_p2 : signal is "no";
    signal grp_fu_380_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_380_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_380_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_380_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal grp_fu_380_p00 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_380_p10 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component hyperspectral_hw_wrapped_am_addmul_12ns_11ns_8ns_19_4_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component hyperspectral_hw_wrapped_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    am_addmul_12ns_11ns_8ns_19_4_1_U1 : component hyperspectral_hw_wrapped_am_addmul_12ns_11ns_8ns_19_4_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 12,
        din1_WIDTH => 11,
        din2_WIDTH => 8,
        dout_WIDTH => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_380_p0,
        din1 => grp_fu_380_p1,
        din2 => grp_fu_380_p2,
        ce => grp_fu_380_ce,
        dout => grp_fu_380_p3);

    flow_control_loop_pipe_sequential_init_U : component hyperspectral_hw_wrapped_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter1_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    i_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_96 <= ap_const_lv2_0;
                elsif (((icmp_ln100_fu_175_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    i_fu_96 <= select_ln100_2_fu_227_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten13_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten13_fu_100 <= ap_const_lv18_0;
                elsif (((icmp_ln100_fu_175_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten13_fu_100 <= add_ln100_1_fu_181_p2;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_92_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_92 <= ap_const_lv18_0;
                elsif (((icmp_ln100_fu_175_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_92 <= select_ln101_2_fu_315_p3;
                end if;
            end if; 
        end if;
    end process;

    j_fu_88_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    j_fu_88 <= ap_const_lv11_0;
                elsif (((icmp_ln100_fu_175_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    j_fu_88 <= select_ln101_1_fu_273_p3;
                end if;
            end if; 
        end if;
    end process;

    k_fu_84_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    k_fu_84 <= ap_const_lv8_0;
                elsif (((icmp_ln100_fu_175_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    k_fu_84 <= add_ln102_fu_303_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                select_ln101_reg_429_pp0_iter2_reg <= select_ln101_reg_429;
                select_ln101_reg_429_pp0_iter3_reg <= select_ln101_reg_429_pp0_iter2_reg;
                tmp_s_reg_440_pp0_iter2_reg <= tmp_s_reg_440;
                tmp_s_reg_440_pp0_iter3_reg <= tmp_s_reg_440_pp0_iter2_reg;
                trunc_ln714_reg_435_pp0_iter2_reg <= trunc_ln714_reg_435;
                trunc_ln714_reg_435_pp0_iter3_reg <= trunc_ln714_reg_435_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln100_fu_175_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln101_reg_429 <= select_ln101_fu_265_p3;
                tmp_s_reg_440 <= in_stream_TDATA(31 downto 16);
                trunc_ln714_reg_435 <= trunc_ln714_fu_289_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln100_1_fu_181_p2 <= std_logic_vector(unsigned(indvar_flatten13_fu_100) + unsigned(ap_const_lv18_1));
    add_ln100_fu_199_p2 <= std_logic_vector(unsigned(i_fu_96) + unsigned(ap_const_lv2_1));
    add_ln101_1_fu_309_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_92) + unsigned(ap_const_lv18_1));
    add_ln101_fu_259_p2 <= std_logic_vector(unsigned(select_ln100_fu_211_p3) + unsigned(ap_const_lv11_1));
    add_ln102_fu_303_p2 <= std_logic_vector(unsigned(select_ln101_fu_265_p3) + unsigned(ap_const_lv8_2));
    add_ln106_1_fu_351_p0 <= grp_fu_380_p3;
    add_ln106_1_fu_351_p2 <= std_logic_vector(unsigned(add_ln106_1_fu_351_p0) + unsigned(zext_ln106_1_fu_348_p1));
    add_ln106_2_fu_370_p0 <= grp_fu_380_p3;
    add_ln106_2_fu_370_p2 <= std_logic_vector(unsigned(add_ln106_2_fu_370_p0) + unsigned(zext_ln106_3_fu_366_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, in_stream_TVALID, icmp_ln100_fu_175_p2)
    begin
                ap_block_pp0_stage0_11001 <= ((icmp_ln100_fu_175_p2 = ap_const_lv1_0) and (in_stream_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, in_stream_TVALID, icmp_ln100_fu_175_p2)
    begin
                ap_block_pp0_stage0_subdone <= ((icmp_ln100_fu_175_p2 = ap_const_lv1_0) and (in_stream_TVALID = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1));
    end process;

        ap_block_state1_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state2_pp0_stage0_iter1_assign_proc : process(in_stream_TVALID, icmp_ln100_fu_175_p2)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((icmp_ln100_fu_175_p2 = ap_const_lv1_0) and (in_stream_TVALID = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln100_fu_175_p2, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln100_fu_175_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter1_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_380_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_380_ce <= ap_const_logic_1;
        else 
            grp_fu_380_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_380_p0 <= grp_fu_380_p00(12 - 1 downto 0);
    grp_fu_380_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_235_p3),13));
    grp_fu_380_p1 <= grp_fu_380_p10(11 - 1 downto 0);
    grp_fu_380_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln101_1_fu_273_p3),13));
    grp_fu_380_p2 <= ap_const_lv19_B4(8 - 1 downto 0);
    icmp_ln100_fu_175_p2 <= "1" when (indvar_flatten13_fu_100 = ap_const_lv18_2D000) else "0";
    icmp_ln101_fu_205_p2 <= "1" when (indvar_flatten_fu_92 = ap_const_lv18_16800) else "0";
    icmp_ln102_fu_247_p2 <= "1" when (unsigned(k_fu_84) < unsigned(ap_const_lv8_B4)) else "0";
    image_r_address0 <= zext_ln106_4_fu_375_p1(19 - 1 downto 0);
    image_r_address1 <= zext_ln106_2_fu_356_p1(19 - 1 downto 0);

    image_r_ce0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            image_r_ce0 <= ap_const_logic_1;
        else 
            image_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    image_r_ce1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            image_r_ce1 <= ap_const_logic_1;
        else 
            image_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    image_r_d0 <= tmp_s_reg_440_pp0_iter3_reg;
    image_r_d1 <= trunc_ln714_reg_435_pp0_iter3_reg;

    image_r_we0_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            image_r_we0 <= ap_const_logic_1;
        else 
            image_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    image_r_we1_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            image_r_we1 <= ap_const_logic_1;
        else 
            image_r_we1 <= ap_const_logic_0;
        end if; 
    end process;


    in_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, in_stream_TVALID, icmp_ln100_fu_175_p2, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln100_fu_175_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_stream_TDATA_blk_n <= in_stream_TVALID;
        else 
            in_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_stream_TREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln100_fu_175_p2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln100_fu_175_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_stream_TREADY <= ap_const_logic_1;
        else 
            in_stream_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    or_ln100_fu_253_p2 <= (icmp_ln102_fu_247_p2 or icmp_ln101_fu_205_p2);
    or_ln106_fu_361_p2 <= (select_ln101_reg_429_pp0_iter3_reg or ap_const_lv8_1);
    select_ln100_1_fu_219_p3 <= 
        ap_const_lv8_0 when (icmp_ln101_fu_205_p2(0) = '1') else 
        k_fu_84;
    select_ln100_2_fu_227_p3 <= 
        add_ln100_fu_199_p2 when (icmp_ln101_fu_205_p2(0) = '1') else 
        i_fu_96;
    select_ln100_fu_211_p3 <= 
        ap_const_lv11_0 when (icmp_ln101_fu_205_p2(0) = '1') else 
        j_fu_88;
    select_ln101_1_fu_273_p3 <= 
        select_ln100_fu_211_p3 when (or_ln100_fu_253_p2(0) = '1') else 
        add_ln101_fu_259_p2;
    select_ln101_2_fu_315_p3 <= 
        ap_const_lv18_1 when (icmp_ln101_fu_205_p2(0) = '1') else 
        add_ln101_1_fu_309_p2;
    select_ln101_fu_265_p3 <= 
        select_ln100_1_fu_219_p3 when (or_ln100_fu_253_p2(0) = '1') else 
        ap_const_lv8_0;
    tmp_2_fu_235_p3 <= (select_ln100_2_fu_227_p3 & ap_const_lv10_0);
    trunc_ln714_fu_289_p1 <= in_stream_TDATA(16 - 1 downto 0);
    zext_ln106_1_fu_348_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln101_reg_429_pp0_iter3_reg),19));
    zext_ln106_2_fu_356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln106_1_fu_351_p2),64));
    zext_ln106_3_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln106_fu_361_p2),19));
    zext_ln106_4_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln106_2_fu_370_p2),64));
end behav;

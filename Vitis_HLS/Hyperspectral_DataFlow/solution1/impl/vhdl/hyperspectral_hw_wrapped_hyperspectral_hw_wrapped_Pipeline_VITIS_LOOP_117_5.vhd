-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity hyperspectral_hw_wrapped_hyperspectral_hw_wrapped_Pipeline_VITIS_LOOP_117_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    in_stream_TVALID : IN STD_LOGIC;
    in_stream_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    in_stream_TREADY : OUT STD_LOGIC;
    in_stream_TKEEP : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_TSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_TUSER : IN STD_LOGIC_VECTOR (3 downto 0);
    in_stream_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    in_stream_TID : IN STD_LOGIC_VECTOR (4 downto 0);
    in_stream_TDEST : IN STD_LOGIC_VECTOR (4 downto 0);
    refPixel_1_034_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    refPixel_1_034_out_ap_vld : OUT STD_LOGIC;
    refPixel_0_033_out : OUT STD_LOGIC_VECTOR (31 downto 0);
    refPixel_0_033_out_ap_vld : OUT STD_LOGIC );
end;


architecture behav of hyperspectral_hw_wrapped_hyperspectral_hw_wrapped_Pipeline_VITIS_LOOP_117_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv9_181 : STD_LOGIC_VECTOR (8 downto 0) := "110000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv8_7F : STD_LOGIC_VECTOR (7 downto 0) := "01111111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_boolean_1 : BOOLEAN := true;

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln117_fu_138_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal in_stream_TDATA_blk_n : STD_LOGIC;
    signal i_1_fu_86 : STD_LOGIC_VECTOR (1 downto 0);
    signal add_ln117_fu_144_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i : STD_LOGIC_VECTOR (1 downto 0);
    signal refPixel_1_fu_90 : STD_LOGIC_VECTOR (31 downto 0);
    signal refPixel_1_6_fu_308_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal refPixel_1_3_fu_94 : STD_LOGIC_VECTOR (31 downto 0);
    signal refPixel_1_5_fu_300_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_1_fu_178_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal mantissa_fu_182_p4 : STD_LOGIC_VECTOR (24 downto 0);
    signal xs_exp_V_fu_168_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln346_fu_196_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln346_fu_200_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln1512_fu_214_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal isNeg_fu_206_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln1512_fu_220_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal ush_fu_224_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal sext_ln1488_fu_232_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln15_fu_192_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln1488_fu_236_p1 : STD_LOGIC_VECTOR (78 downto 0);
    signal r_V_fu_240_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal tmp_fu_252_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_1_fu_246_p2 : STD_LOGIC_VECTOR (78 downto 0);
    signal zext_ln818_fu_260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_264_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal val_fu_274_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_160_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_2_fu_282_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln122_fu_296_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal result_V_fu_288_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_229 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component hyperspectral_hw_wrapped_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component hyperspectral_hw_wrapped_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_start_int = ap_const_logic_0) or ((icmp_ln117_fu_138_p2 = ap_const_lv1_0) and (in_stream_TVALID = ap_const_logic_0)))) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    i_1_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_229)) then
                if ((icmp_ln117_fu_138_p2 = ap_const_lv1_0)) then 
                    i_1_fu_86 <= add_ln117_fu_144_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_1_fu_86 <= ap_const_lv2_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((ap_start_int = ap_const_logic_0) or ((icmp_ln117_fu_138_p2 = ap_const_lv1_0) and (in_stream_TVALID = ap_const_logic_0)))) and (icmp_ln117_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                refPixel_1_3_fu_94 <= refPixel_1_5_fu_300_p3;
                refPixel_1_fu_90 <= refPixel_1_6_fu_308_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state1, in_stream_TVALID, icmp_ln117_fu_138_p2, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln117_fu_144_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i) + unsigned(ap_const_lv2_1));
    add_ln346_fu_200_p2 <= std_logic_vector(unsigned(zext_ln346_fu_196_p1) + unsigned(ap_const_lv9_181));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_ST_fsm_state1_blk_assign_proc : process(in_stream_TVALID, icmp_ln117_fu_138_p2, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) or ((icmp_ln117_fu_138_p2 = ap_const_lv1_0) and (in_stream_TVALID = ap_const_logic_0)))) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(in_stream_TVALID, icmp_ln117_fu_138_p2, ap_start_int)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start_int = ap_const_logic_0) or ((icmp_ln117_fu_138_p2 = ap_const_lv1_0) and (in_stream_TVALID = ap_const_logic_0)));
    end process;


    ap_condition_229_assign_proc : process(ap_CS_fsm_state1, in_stream_TVALID, icmp_ln117_fu_138_p2, ap_start_int)
    begin
                ap_condition_229 <= (not(((ap_start_int = ap_const_logic_0) or ((icmp_ln117_fu_138_p2 = ap_const_lv1_0) and (in_stream_TVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_state1, in_stream_TVALID, icmp_ln117_fu_138_p2, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or ((icmp_ln117_fu_138_p2 = ap_const_lv1_0) and (in_stream_TVALID = ap_const_logic_0)))) and (icmp_ln117_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_state1, in_stream_TVALID, icmp_ln117_fu_138_p2, ap_loop_exit_ready, ap_done_reg, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or ((icmp_ln117_fu_138_p2 = ap_const_lv1_0) and (in_stream_TVALID = ap_const_logic_0)))) and (ap_loop_exit_ready = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_state1, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_state1, in_stream_TVALID, icmp_ln117_fu_138_p2, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or ((icmp_ln117_fu_138_p2 = ap_const_lv1_0) and (in_stream_TVALID = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_assign_proc : process(ap_CS_fsm_state1, i_1_fu_86, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_sig_allocacmp_i <= ap_const_lv2_0;
        else 
            ap_sig_allocacmp_i <= i_1_fu_86;
        end if; 
    end process;

    icmp_ln117_fu_138_p2 <= "1" when (ap_sig_allocacmp_i = ap_const_lv2_2) else "0";

    in_stream_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state1, in_stream_TVALID, icmp_ln117_fu_138_p2, ap_start_int)
    begin
        if (((icmp_ln117_fu_138_p2 = ap_const_lv1_0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_stream_TDATA_blk_n <= in_stream_TVALID;
        else 
            in_stream_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    in_stream_TREADY_assign_proc : process(ap_CS_fsm_state1, in_stream_TVALID, icmp_ln117_fu_138_p2, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or ((icmp_ln117_fu_138_p2 = ap_const_lv1_0) and (in_stream_TVALID = ap_const_logic_0)))) and (icmp_ln117_fu_138_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            in_stream_TREADY <= ap_const_logic_1;
        else 
            in_stream_TREADY <= ap_const_logic_0;
        end if; 
    end process;

    isNeg_fu_206_p3 <= add_ln346_fu_200_p2(8 downto 8);
    mantissa_fu_182_p4 <= ((ap_const_lv1_1 & p_Result_1_fu_178_p1) & ap_const_lv1_0);
    p_Result_1_fu_178_p1 <= in_stream_TDATA(23 - 1 downto 0);
    p_Result_s_fu_160_p3 <= in_stream_TDATA(31 downto 31);
    r_V_1_fu_246_p2 <= std_logic_vector(shift_left(unsigned(zext_ln15_fu_192_p1),to_integer(unsigned('0' & zext_ln1488_fu_236_p1(31-1 downto 0)))));
    r_V_fu_240_p2 <= std_logic_vector(shift_right(unsigned(zext_ln15_fu_192_p1),to_integer(unsigned('0' & zext_ln1488_fu_236_p1(31-1 downto 0)))));
    refPixel_0_033_out <= refPixel_1_fu_90;

    refPixel_0_033_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, in_stream_TVALID, icmp_ln117_fu_138_p2, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or ((icmp_ln117_fu_138_p2 = ap_const_lv1_0) and (in_stream_TVALID = ap_const_logic_0)))) and (icmp_ln117_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            refPixel_0_033_out_ap_vld <= ap_const_logic_1;
        else 
            refPixel_0_033_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    refPixel_1_034_out <= refPixel_1_3_fu_94;

    refPixel_1_034_out_ap_vld_assign_proc : process(ap_CS_fsm_state1, in_stream_TVALID, icmp_ln117_fu_138_p2, ap_start_int)
    begin
        if ((not(((ap_start_int = ap_const_logic_0) or ((icmp_ln117_fu_138_p2 = ap_const_lv1_0) and (in_stream_TVALID = ap_const_logic_0)))) and (icmp_ln117_fu_138_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            refPixel_1_034_out_ap_vld <= ap_const_logic_1;
        else 
            refPixel_1_034_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    refPixel_1_5_fu_300_p3 <= 
        result_V_fu_288_p3 when (trunc_ln122_fu_296_p1(0) = '1') else 
        refPixel_1_3_fu_94;
    refPixel_1_6_fu_308_p3 <= 
        refPixel_1_fu_90 when (trunc_ln122_fu_296_p1(0) = '1') else 
        result_V_fu_288_p3;
    result_V_2_fu_282_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(val_fu_274_p3));
    result_V_fu_288_p3 <= 
        result_V_2_fu_282_p2 when (p_Result_s_fu_160_p3(0) = '1') else 
        val_fu_274_p3;
        sext_ln1488_fu_232_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ush_fu_224_p3),32));

        sext_ln1512_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1512_fu_214_p2),9));

    sub_ln1512_fu_214_p2 <= std_logic_vector(unsigned(ap_const_lv8_7F) - unsigned(xs_exp_V_fu_168_p4));
    tmp_fu_252_p3 <= r_V_fu_240_p2(24 downto 24);
    tmp_s_fu_264_p4 <= r_V_1_fu_246_p2(55 downto 24);
    trunc_ln122_fu_296_p1 <= ap_sig_allocacmp_i(1 - 1 downto 0);
    ush_fu_224_p3 <= 
        sext_ln1512_fu_220_p1 when (isNeg_fu_206_p3(0) = '1') else 
        add_ln346_fu_200_p2;
    val_fu_274_p3 <= 
        zext_ln818_fu_260_p1 when (isNeg_fu_206_p3(0) = '1') else 
        tmp_s_fu_264_p4;
    xs_exp_V_fu_168_p4 <= in_stream_TDATA(30 downto 23);
    zext_ln1488_fu_236_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln1488_fu_232_p1),79));
    zext_ln15_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mantissa_fu_182_p4),79));
    zext_ln346_fu_196_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xs_exp_V_fu_168_p4),9));
    zext_ln818_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_252_p3),32));
end behav;

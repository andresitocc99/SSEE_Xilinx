// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module hyperspectral_hw_wrapped_hyperspectral_hw_wrapped_Pipeline_VITIS_LOOP_102_1_VITIS_LOOP_103_2_VITIS_LOOP_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        in_stream_TVALID,
        image_r_address0,
        image_r_ce0,
        image_r_we0,
        image_r_d0,
        image_r_address1,
        image_r_ce1,
        image_r_we1,
        image_r_d1,
        in_stream_TDATA,
        in_stream_TREADY,
        in_stream_TKEEP,
        in_stream_TSTRB,
        in_stream_TUSER,
        in_stream_TLAST,
        in_stream_TID,
        in_stream_TDEST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   in_stream_TVALID;
output  [18:0] image_r_address0;
output   image_r_ce0;
output   image_r_we0;
output  [15:0] image_r_d0;
output  [18:0] image_r_address1;
output   image_r_ce1;
output   image_r_we1;
output  [15:0] image_r_d1;
input  [31:0] in_stream_TDATA;
output   in_stream_TREADY;
input  [3:0] in_stream_TKEEP;
input  [3:0] in_stream_TSTRB;
input  [3:0] in_stream_TUSER;
input  [0:0] in_stream_TLAST;
input  [4:0] in_stream_TID;
input  [4:0] in_stream_TDEST;

reg ap_idle;
reg image_r_ce0;
reg image_r_we0;
reg image_r_ce1;
reg image_r_we1;
reg in_stream_TREADY;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
wire   [0:0] icmp_ln102_fu_175_p2;
reg    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_exit_pp0_iter1_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    in_stream_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [7:0] select_ln103_fu_265_p3;
reg   [7:0] select_ln103_reg_429;
reg   [7:0] select_ln103_reg_429_pp0_iter2_reg;
reg   [7:0] select_ln103_reg_429_pp0_iter3_reg;
wire   [15:0] trunc_ln714_fu_289_p1;
reg   [15:0] trunc_ln714_reg_435;
reg   [15:0] trunc_ln714_reg_435_pp0_iter2_reg;
reg   [15:0] trunc_ln714_reg_435_pp0_iter3_reg;
reg   [15:0] tmp_s_reg_440;
reg   [15:0] tmp_s_reg_440_pp0_iter2_reg;
reg   [15:0] tmp_s_reg_440_pp0_iter3_reg;
wire   [63:0] zext_ln108_2_fu_356_p1;
wire   [63:0] zext_ln108_4_fu_375_p1;
reg   [7:0] k_fu_84;
wire   [7:0] add_ln104_fu_303_p2;
wire    ap_loop_init;
reg   [10:0] j_fu_88;
wire   [10:0] select_ln103_1_fu_273_p3;
reg   [17:0] indvar_flatten_fu_92;
wire   [17:0] select_ln103_2_fu_315_p3;
reg   [1:0] i_fu_96;
wire   [1:0] select_ln102_2_fu_227_p3;
reg   [17:0] indvar_flatten13_fu_100;
wire   [17:0] add_ln102_1_fu_181_p2;
wire   [0:0] icmp_ln103_fu_205_p2;
wire   [1:0] add_ln102_fu_199_p2;
wire   [11:0] tmp_2_fu_235_p3;
wire   [0:0] icmp_ln104_fu_247_p2;
wire   [10:0] select_ln102_fu_211_p3;
wire   [0:0] or_ln102_fu_253_p2;
wire   [7:0] select_ln102_1_fu_219_p3;
wire   [10:0] add_ln103_fu_259_p2;
wire   [17:0] add_ln103_1_fu_309_p2;
wire   [18:0] add_ln108_1_fu_351_p0;
wire  signed [18:0] grp_fu_380_p3;
wire   [18:0] zext_ln108_1_fu_348_p1;
(* use_dsp48 = "no" *) wire   [18:0] add_ln108_1_fu_351_p2;
wire   [7:0] or_ln108_fu_361_p2;
wire   [18:0] add_ln108_2_fu_370_p0;
wire   [18:0] zext_ln108_3_fu_366_p1;
(* use_dsp48 = "no" *) wire   [18:0] add_ln108_2_fu_370_p2;
wire   [11:0] grp_fu_380_p0;
wire   [10:0] grp_fu_380_p1;
wire   [7:0] grp_fu_380_p2;
reg    grp_fu_380_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire   [12:0] grp_fu_380_p00;
wire   [12:0] grp_fu_380_p10;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_done_reg = 1'b0;
end

hyperspectral_hw_wrapped_am_addmul_12ns_11ns_8ns_19_4_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 12 ),
    .din1_WIDTH( 11 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 19 ))
am_addmul_12ns_11ns_8ns_19_4_1_U1(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_380_p0),
    .din1(grp_fu_380_p1),
    .din2(grp_fu_380_p2),
    .ce(grp_fu_380_ce),
    .dout(grp_fu_380_p3)
);

hyperspectral_hw_wrapped_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter1_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            i_fu_96 <= 2'd0;
        end else if (((icmp_ln102_fu_175_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            i_fu_96 <= select_ln102_2_fu_227_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten13_fu_100 <= 18'd0;
        end else if (((icmp_ln102_fu_175_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten13_fu_100 <= add_ln102_1_fu_181_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_92 <= 18'd0;
        end else if (((icmp_ln102_fu_175_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten_fu_92 <= select_ln103_2_fu_315_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            j_fu_88 <= 11'd0;
        end else if (((icmp_ln102_fu_175_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            j_fu_88 <= select_ln103_1_fu_273_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            k_fu_84 <= 8'd0;
        end else if (((icmp_ln102_fu_175_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            k_fu_84 <= add_ln104_fu_303_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        select_ln103_reg_429_pp0_iter2_reg <= select_ln103_reg_429;
        select_ln103_reg_429_pp0_iter3_reg <= select_ln103_reg_429_pp0_iter2_reg;
        tmp_s_reg_440_pp0_iter2_reg <= tmp_s_reg_440;
        tmp_s_reg_440_pp0_iter3_reg <= tmp_s_reg_440_pp0_iter2_reg;
        trunc_ln714_reg_435_pp0_iter2_reg <= trunc_ln714_reg_435;
        trunc_ln714_reg_435_pp0_iter3_reg <= trunc_ln714_reg_435_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln102_fu_175_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        select_ln103_reg_429 <= select_ln103_fu_265_p3;
        tmp_s_reg_440 <= {{in_stream_TDATA[31:16]}};
        trunc_ln714_reg_435 <= trunc_ln714_fu_289_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln102_fu_175_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter3_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_380_ce = 1'b1;
    end else begin
        grp_fu_380_ce = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        image_r_ce0 = 1'b1;
    end else begin
        image_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        image_r_ce1 = 1'b1;
    end else begin
        image_r_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        image_r_we0 = 1'b1;
    end else begin
        image_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        image_r_we1 = 1'b1;
    end else begin
        image_r_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln102_fu_175_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_stream_TDATA_blk_n = in_stream_TVALID;
    end else begin
        in_stream_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln102_fu_175_p2 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        in_stream_TREADY = 1'b1;
    end else begin
        in_stream_TREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln102_1_fu_181_p2 = (indvar_flatten13_fu_100 + 18'd1);

assign add_ln102_fu_199_p2 = (i_fu_96 + 2'd1);

assign add_ln103_1_fu_309_p2 = (indvar_flatten_fu_92 + 18'd1);

assign add_ln103_fu_259_p2 = (select_ln102_fu_211_p3 + 11'd1);

assign add_ln104_fu_303_p2 = (select_ln103_fu_265_p3 + 8'd2);

assign add_ln108_1_fu_351_p0 = grp_fu_380_p3;

assign add_ln108_1_fu_351_p2 = (add_ln108_1_fu_351_p0 + zext_ln108_1_fu_348_p1);

assign add_ln108_2_fu_370_p0 = grp_fu_380_p3;

assign add_ln108_2_fu_370_p2 = (add_ln108_2_fu_370_p0 + zext_ln108_3_fu_366_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((icmp_ln102_fu_175_p2 == 1'd0) & (in_stream_TVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((icmp_ln102_fu_175_p2 == 1'd0) & (in_stream_TVALID == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln102_fu_175_p2 == 1'd0) & (in_stream_TVALID == 1'b0));
end

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter1_stage0;

assign grp_fu_380_p0 = grp_fu_380_p00;

assign grp_fu_380_p00 = tmp_2_fu_235_p3;

assign grp_fu_380_p1 = grp_fu_380_p10;

assign grp_fu_380_p10 = select_ln103_1_fu_273_p3;

assign grp_fu_380_p2 = 19'd180;

assign icmp_ln102_fu_175_p2 = ((indvar_flatten13_fu_100 == 18'd184320) ? 1'b1 : 1'b0);

assign icmp_ln103_fu_205_p2 = ((indvar_flatten_fu_92 == 18'd92160) ? 1'b1 : 1'b0);

assign icmp_ln104_fu_247_p2 = ((k_fu_84 < 8'd180) ? 1'b1 : 1'b0);

assign image_r_address0 = zext_ln108_4_fu_375_p1;

assign image_r_address1 = zext_ln108_2_fu_356_p1;

assign image_r_d0 = tmp_s_reg_440_pp0_iter3_reg;

assign image_r_d1 = trunc_ln714_reg_435_pp0_iter3_reg;

assign or_ln102_fu_253_p2 = (icmp_ln104_fu_247_p2 | icmp_ln103_fu_205_p2);

assign or_ln108_fu_361_p2 = (select_ln103_reg_429_pp0_iter3_reg | 8'd1);

assign select_ln102_1_fu_219_p3 = ((icmp_ln103_fu_205_p2[0:0] == 1'b1) ? 8'd0 : k_fu_84);

assign select_ln102_2_fu_227_p3 = ((icmp_ln103_fu_205_p2[0:0] == 1'b1) ? add_ln102_fu_199_p2 : i_fu_96);

assign select_ln102_fu_211_p3 = ((icmp_ln103_fu_205_p2[0:0] == 1'b1) ? 11'd0 : j_fu_88);

assign select_ln103_1_fu_273_p3 = ((or_ln102_fu_253_p2[0:0] == 1'b1) ? select_ln102_fu_211_p3 : add_ln103_fu_259_p2);

assign select_ln103_2_fu_315_p3 = ((icmp_ln103_fu_205_p2[0:0] == 1'b1) ? 18'd1 : add_ln103_1_fu_309_p2);

assign select_ln103_fu_265_p3 = ((or_ln102_fu_253_p2[0:0] == 1'b1) ? select_ln102_1_fu_219_p3 : 8'd0);

assign tmp_2_fu_235_p3 = {{select_ln102_2_fu_227_p3}, {10'd0}};

assign trunc_ln714_fu_289_p1 = in_stream_TDATA[15:0];

assign zext_ln108_1_fu_348_p1 = select_ln103_reg_429_pp0_iter3_reg;

assign zext_ln108_2_fu_356_p1 = add_ln108_1_fu_351_p2;

assign zext_ln108_3_fu_366_p1 = or_ln108_fu_361_p2;

assign zext_ln108_4_fu_375_p1 = add_ln108_2_fu_370_p2;

endmodule //hyperspectral_hw_wrapped_hyperspectral_hw_wrapped_Pipeline_VITIS_LOOP_102_1_VITIS_LOOP_103_2_VITIS_LOOP_1

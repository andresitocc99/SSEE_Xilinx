// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
// Version: 2022.1
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mmult_hw_wrapped_mmult_hw_wrapped_Pipeline_VITIS_LOOP_113_7_VITIS_LOOP_114_8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        OUTPUT_STREAM_TREADY,
        out_r_address0,
        out_r_ce0,
        out_r_q0,
        OUTPUT_STREAM_TDATA,
        OUTPUT_STREAM_TVALID,
        OUTPUT_STREAM_TKEEP,
        OUTPUT_STREAM_TSTRB,
        OUTPUT_STREAM_TUSER,
        OUTPUT_STREAM_TLAST,
        OUTPUT_STREAM_TID,
        OUTPUT_STREAM_TDEST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   OUTPUT_STREAM_TREADY;
output  [9:0] out_r_address0;
output   out_r_ce0;
input  [31:0] out_r_q0;
output  [31:0] OUTPUT_STREAM_TDATA;
output   OUTPUT_STREAM_TVALID;
output  [3:0] OUTPUT_STREAM_TKEEP;
output  [3:0] OUTPUT_STREAM_TSTRB;
output  [3:0] OUTPUT_STREAM_TUSER;
output  [0:0] OUTPUT_STREAM_TLAST;
output  [4:0] OUTPUT_STREAM_TID;
output  [4:0] OUTPUT_STREAM_TDEST;

reg ap_idle;
reg out_r_ce0;
reg OUTPUT_STREAM_TVALID;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln113_fu_143_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    OUTPUT_STREAM_TDATA_blk_n;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] e_last_V_fu_242_p2;
reg   [0:0] e_last_V_reg_303;
wire   [63:0] zext_ln122_1_fu_231_p1;
reg   [5:0] j_fu_70;
wire   [5:0] add_ln114_fu_248_p2;
wire    ap_loop_init;
reg   [5:0] ap_sig_allocacmp_j_load;
reg   [5:0] i_fu_74;
wire   [5:0] select_ln113_1_fu_181_p3;
reg   [5:0] ap_sig_allocacmp_i_load;
reg   [10:0] indvar_flatten53_fu_78;
wire   [10:0] add_ln113_1_fu_149_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten53_load;
reg    ap_block_pp0_stage0_01001;
wire   [0:0] icmp_ln114_fu_167_p2;
wire   [5:0] add_ln113_fu_161_p2;
wire   [4:0] trunc_ln122_fu_189_p1;
wire   [0:0] cmp110_mid1_fu_201_p2;
wire   [0:0] cmp11062_fu_207_p2;
wire   [5:0] select_ln113_fu_173_p3;
wire   [9:0] tmp_s_fu_193_p3;
wire   [9:0] zext_ln122_fu_221_p1;
wire   [9:0] add_ln122_fu_225_p2;
wire   [0:0] select_ln113_2_fu_213_p3;
wire   [0:0] icmp_ln129_fu_236_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_done_reg = 1'b0;
end

mmult_hw_wrapped_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln113_fu_143_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_74 <= select_ln113_1_fu_181_p3;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_74 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln113_fu_143_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten53_fu_78 <= add_ln113_1_fu_149_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten53_fu_78 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln113_fu_143_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            j_fu_70 <= add_ln114_fu_248_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            j_fu_70 <= 6'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln113_fu_143_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        e_last_V_reg_303 <= e_last_V_fu_242_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OUTPUT_STREAM_TDATA_blk_n = OUTPUT_STREAM_TREADY;
    end else begin
        OUTPUT_STREAM_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        OUTPUT_STREAM_TVALID = 1'b1;
    end else begin
        OUTPUT_STREAM_TVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln113_fu_143_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_load = 6'd0;
    end else begin
        ap_sig_allocacmp_i_load = i_fu_74;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten53_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten53_load = indvar_flatten53_fu_78;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_j_load = 6'd0;
    end else begin
        ap_sig_allocacmp_j_load = j_fu_70;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OUTPUT_STREAM_TDATA = out_r_q0;

assign OUTPUT_STREAM_TDEST = 5'd5;

assign OUTPUT_STREAM_TID = 5'd5;

assign OUTPUT_STREAM_TKEEP = 4'd15;

assign OUTPUT_STREAM_TLAST = e_last_V_reg_303;

assign OUTPUT_STREAM_TSTRB = 4'd15;

assign OUTPUT_STREAM_TUSER = 4'd4;

assign add_ln113_1_fu_149_p2 = (ap_sig_allocacmp_indvar_flatten53_load + 11'd1);

assign add_ln113_fu_161_p2 = (ap_sig_allocacmp_i_load + 6'd1);

assign add_ln114_fu_248_p2 = (select_ln113_fu_173_p3 + 6'd1);

assign add_ln122_fu_225_p2 = (tmp_s_fu_193_p3 + zext_ln122_fu_221_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((1'b0 == OUTPUT_STREAM_TREADY) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((1'b0 == OUTPUT_STREAM_TREADY) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == OUTPUT_STREAM_TREADY) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (1'b0 == OUTPUT_STREAM_TREADY);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign cmp11062_fu_207_p2 = ((ap_sig_allocacmp_i_load == 6'd31) ? 1'b1 : 1'b0);

assign cmp110_mid1_fu_201_p2 = ((add_ln113_fu_161_p2 == 6'd31) ? 1'b1 : 1'b0);

assign e_last_V_fu_242_p2 = (select_ln113_2_fu_213_p3 & icmp_ln129_fu_236_p2);

assign icmp_ln113_fu_143_p2 = ((ap_sig_allocacmp_indvar_flatten53_load == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln114_fu_167_p2 = ((ap_sig_allocacmp_j_load == 6'd32) ? 1'b1 : 1'b0);

assign icmp_ln129_fu_236_p2 = ((select_ln113_fu_173_p3 == 6'd31) ? 1'b1 : 1'b0);

assign out_r_address0 = zext_ln122_1_fu_231_p1;

assign select_ln113_1_fu_181_p3 = ((icmp_ln114_fu_167_p2[0:0] == 1'b1) ? add_ln113_fu_161_p2 : ap_sig_allocacmp_i_load);

assign select_ln113_2_fu_213_p3 = ((icmp_ln114_fu_167_p2[0:0] == 1'b1) ? cmp110_mid1_fu_201_p2 : cmp11062_fu_207_p2);

assign select_ln113_fu_173_p3 = ((icmp_ln114_fu_167_p2[0:0] == 1'b1) ? 6'd0 : ap_sig_allocacmp_j_load);

assign tmp_s_fu_193_p3 = {{trunc_ln122_fu_189_p1}, {5'd0}};

assign trunc_ln122_fu_189_p1 = select_ln113_1_fu_181_p3[4:0];

assign zext_ln122_1_fu_231_p1 = add_ln122_fu_225_p2;

assign zext_ln122_fu_221_p1 = select_ln113_fu_173_p3;

endmodule //mmult_hw_wrapped_mmult_hw_wrapped_Pipeline_VITIS_LOOP_113_7_VITIS_LOOP_114_8
